# -*- coding: utf-8 -*-
"""realtime_maskdtetction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-3zzAxjULQdpzuLsWRPNcJdXNtBzpIqH
"""
#This Code runs with tensorflow 2.0 and Python 3.6 or above
#Requires imutils 



## IMPORTING REQUIRED PACKAGES
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.models import load_model
from imutils.video import VideoStream
import numpy as np
import argparse
import imutils
import time
import cv2
import os


## DEFINED A FUNCTION THAT USES THE FACE DETECTOR MODEL FROM OPENCV AND MASK DETECTOR MODEL 
def detect_mask(image, face_detector, mask_detector):
  (h, w) = image.shape[:2]
  blob = cv2.dnn.blobFromImage(image, 1.0, (300, 300),(104.0, 177.0, 123.0))
  face_detector.setInput(blob)
  detections = face_detector.forward()
  faces = []
  locations = []
  probs = []
  
  for i in range(detections.shape[2]):
    if detections[0,0,i,2]>0.3:
        box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
        (startX, startY, endX, endY) = box.astype("int")
        (startX, startY) = (max(0, startX), max(25, startY))
        (endX, endY) = (min(w - 1, endX), min(h - 1, endY))
        face = image[startY:endY, startX:endX]
        face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)
        face = cv2.resize(face, (224, 224))
        face = img_to_array(face)
        face = preprocess_input(face)
        face = np.expand_dims(face, axis=0)
        faces.append(face)
        locations.append([startX, startY, endX, endY])
    if len(faces)>0:
          probs = mask_detector.predict(faces)
    return (locations, probs)
## PATH FOR deploy.prototext and resnet weights for face detection
proto_path = "deploy.prototxt"
weights_path = "res10_300x300_ssd_iter_140000.caffemodel"
face_detector = cv2.dnn.readNet(proto_path, weights_path)
#loading model for mask detection
mask_detector = load_model('facemask_detection.h5')
vs = VideoStream(src=0).start()
time.sleep(1.0)
while True:
  image = vs.read()
  image = imutils.resize(image, width=300)
  (locations, probs) = detect_mask(image, face_detector, mask_detector)
  for(box, pred) in zip(locations, probs):
    (startX, startY, endX, endY) = box
    (mask, withoutMask) = pred
    label = "Mask" if mask > withoutMask else "No Mask"
    color = (0, 255, 0) if label == "Mask" else (0, 0, 255)
    label = "{}: {:.2f}%".format(label, max(mask, withoutMask) * 100)
    cv2.putText(image, label, (startX, startY - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)
    cv2.rectangle(image, (startX, startY), (endX, endY), color, 2)
    cv2.imshow("Image",image)
    key = cv2.waitKey(10) & 0xFF
    if key == ord("q"):
        break
VideoStream(src=0).start()

#Emergency quit:::: Uncomment and run this code
#vs.stream.release()